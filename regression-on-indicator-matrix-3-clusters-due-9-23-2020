
#################### regression on indicator matrix, simulating 3 clusters, plotting the decision boundary
#################### and see why it may not work

set.seed(123)

### simulate 3 clusters
x <- matrix(rnorm(150*2, 0, 0.5),150,2)   
c=sample(1:3,150,replace=TRUE)
#let's assume the center point for each cluster is on the same line x2=x1
xmean <- matrix(c(1,3,5, 1,3,5), nrow=3)
xclusterd=x+xmean[c,]
plot(xclusterd,col=c, pch=8)

y<- matrix(0, 150, 3)

for (i in 1:150) {
  if ( c[i]==1) { y[i,1]=1 }
  else if ( c[i]==2) { y[i,2]=1 }
  else  { y[i,3]=1 }
}

###remember to add an intercept column to X
X<-cbind(rep(1, 150),xclusterd)

#fit model using y and xclusterd
B <- solve(t(X)%*%X)%*%t(X)%*%y
B
#we get the f1, f2, f3, 
#those fitted functions obtained by linear regression are through 1 vs non-1, 2 vs non-2, 3 vs non-3
#by here, linear regression for B is done

#then, when we move to decision rule (considering having a new point x)
#we can only compare two at each time for making a decision, that is, if f1=f2, if f2=f3, if f1=f3
#(each decision boundary line just decides whether it's in right or left)
#thus, we need to generate b12, b23, b13 here
b12=B[,1]-B[,2];
b23=B[,2]-B[,3];
b13=B[,1]-B[,3];
#0=b0+b1x1+b2x2
#then, x2 = -b0/b2 - b1/b2
abline(-b12[1]/b12[3],-b12[2]/b12[3], col='red')
abline(-b23[1]/b23[3],-b23[2]/b23[3], col='green')
abline(-b13[1]/b13[3],-b13[2]/b13[3], col='purple')


##another example
xmean=matrix(rnorm(3*2,sd=4),3,2)
xclusterd=x+xmean[c,]
plot(xclusterd,col=c, pch=8)
X<-cbind(rep(1, 150),xclusterd)
B <- solve(t(X)%*%X)%*%t(X)%*%y
B
b12=B[,1]-B[,2];
b23=B[,2]-B[,3];
b13=B[,1]-B[,3];
abline(-b12[1]/b12[3],-b12[2]/b12[3], col='red')
abline(-b23[1]/b23[3],-b23[2]/b23[3], col='green')
abline(-b13[1]/b13[3],-b13[2]/b13[3], col='purple')

